const express = require("express");
const router = express.Router();
const bcryptjs = require("bcryptjs");
const db = require("../db");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const { uploadMiddleware } = require("./upload");

const JWT_SECRET = process.env.JWT_SECRET || "mysecret";

// üìå –†–æ—É—Ç: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post("/register", uploadMiddleware, async (req, res) => {
  const { email, password, first_name, last_name, } = req.body;

  try {
    const existing = await db.query("SELECT * FROM users WHERE email = $1", [email]);
    if (existing.rows.length > 0) {
      return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }
    console.log("req.file:", req.file);
    let photoUrl = null;
    if (req.file) {
      photoUrl = `/uploads/avatars/${req.file.filename}`;
    }

    const hashedPassword = await bcryptjs.hash(password, 10);

    const result = await db.query(
      `INSERT INTO users (email, password, first_name, last_name, photo_url)
       VALUES ($1, $2, $3, $4, $5) RETURNING id, email`,
      [email, hashedPassword, first_name, last_name, photoUrl]
    );

    const user = result.rows[0];

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, {
      expiresIn: "7d",
    });

    res.json({
      message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ",
      token,
      user: {
        id: user.id,
        email: user.email,
        first_name,
        last_name,
        photoUrl,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üîë –†–æ—É—Ç: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const result = await db.query("SELECT * FROM users WHERE email = $1", [email]);
    const user = result.rows[0];
    if (!user) return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });

    const isMatch = await bcryptjs.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });

    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, {
      expiresIn: "7d",
    });

    res.json({ token, user: { id: user.id, email: user.email } });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

  try {
    const userCheck = await db.query("SELECT * FROM users WHERE email = $1", [email]);
    if (userCheck.rows.length === 0) {
      return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const code = Math.floor(100000 + Math.random() * 900000).toString();
    const expires = Date.now() + 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
    await db.query("DELETE FROM password_resets WHERE email = $1", [email]);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    await db.query(`
      INSERT INTO password_resets (email, code, expires_at)
      VALUES ($1, $2, to_timestamp($3 / 1000.0))
    `, [email, code, expires]);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP –Ø–Ω–¥–µ–∫—Å
    const transporter = nodemailer.createTransport({
      host: "smtp.yandex.ru",
      port: 465,
      secure: true, // –¥–ª—è –ø–æ—Ä—Ç–∞ 465 –≤—Å–µ–≥–¥–∞ true
      auth: {
        user: process.env.YANDEX_EMAIL,      // —Ç–≤–æ–π –Ø–Ω–¥–µ–∫—Å email
        pass: process.env.YANDEX_PASSWORD,   // –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞
      },
      tls: {
        rejectUnauthorized: false,  // –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
      },
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    await transporter.sendMail({
      from: `"DragonAuto" <${process.env.YANDEX_EMAIL}>`,
      to: email,
      subject: "–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è",
      text: `–í–∞—à –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${code}. –û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.`,
    });

    console.log(`–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ${code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    res.json({ message: "–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email" });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ /forgot-password:", error);
    res.status(500).json({ error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞" });
  }
});

// üîê –†–æ—É—Ç: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
router.post("/reset-password", async (req, res) => {
  const { email, otp, newPassword } = req.body;

  try {
    const result = await db.query(
      "SELECT * FROM password_resets WHERE email = $1 AND code = $2 ORDER BY created_at DESC LIMIT 1",
      [email, otp]
    );

    const entry = result.rows[0];

    if (!entry) {
      return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
    }

    if (new Date(entry.expires_at) < new Date()) {
      return res.status(400).json({ error: "–ö–æ–¥ –∏—Å—Ç—ë–∫" });
    }

    const hashedPassword = await bcryptjs.hash(newPassword, 10);
    await db.query("UPDATE users SET password = $1 WHERE email = $2", [hashedPassword, email]);

    await db.query("DELETE FROM password_resets WHERE email = $1", [email]);

    res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
